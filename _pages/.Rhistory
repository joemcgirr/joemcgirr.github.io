sink(file = NULL)
# Output file to run all sbatch scripts
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(8001:10000)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE)
head(errs)
filter(errs, !grepl("0 error",V5))
slurm_errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/slurm_errs.txt", header = FALSE, sep = "")
head(slurm_errs)
filter(slurm_errs, V5 != 0)
filter(slurm_errs, V5 != 0) |> nrow()
filter(errs, !grepl("0 error",V5)) |> nrow()
write.table(filter(errs, !grepl("0 error",V5)),"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
write.table(filter(slurm_errs, V5 != 0),"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/slurm_errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# Output file to run all sbatch scripts
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(10001:12000)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(12001:14000)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(14001:16000)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(16001:18000)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
sink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
cat("#!/bin/bash\n")
for(i_cel in c(18001:19559)){
cat(paste0("sbatch /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/generate_cychp_",i_cel,".sh\n"))
}
unlink("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/scripts/run_sbatch.sh")
sink(file = NULL)
# Check or errors
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/temp
# grep -r 'error(' > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/errs.txt
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE)
head(errs)
filter(errs, !grepl("0 error",V5)) |> nrow()
# Check or errors
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/temp
# grep -r 'error(' > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/errs.txt
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE)
head(errs)
filter(errs, !grepl("0 error",V5)) |> nrow()
# Check or errors
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/temp
# grep -r 'error(' > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/errs.txt
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE, sep = "")
head(errs)
filter(errs, !grepl("0 error",V7)) |> nrow()
filter(errs, !grepl("0 error",V7))
errs$V7
head(errs)
filter(errs, V6 != 0)) |> nrow()
filter(errs, V6 != 0) |> nrow()
filter(errs, `V6` != 0) |> nrow()
unique(errs$V6)
tibble(errs)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
filter(errs, V6 != 0) |> nrow()
head(errs)
filter(errs, V6 != 0)
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE, sep = "")
head(errs)
filter(errs, V6 != 0) |> nrow()
write.table(filter(errs, V6 != 0) ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/Slurm
# ls -lth *.err > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/slurm_errs.txt
slurm_errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/slurm_errs.txt", header = FALSE, sep = "")
head(slurm_errs)
filter(slurm_errs, V5 != 0) |> nrow()
write.table(filter(slurm_errs, V5 != 0),"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/slurm_errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
head(errs)
separate(errs,V1,c("cel_num"), sep = "/")
errs <- separate(errs,V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_")
head(errs)
# Check or errors
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/temp
# grep -r 'error(' > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/errs.txt
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE, sep = "")
# check that all runs showing 2 errors are due to broken links
cel_list_rows <- separate(errs,V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_") |> pull(cel_num)
cel_list_rows
# Check or errors
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/temp
# grep -r 'error(' > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/errs.txt
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs.txt", header = FALSE, sep = "")
# check that all runs showing 2 errors are due to broken links
cel_list_rows <- filter(errs, V6 != 0) |> separate(V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_") |> pull(cel_num)
cel_list_rows
# check that all runs showing 2 errors are due to broken links
cel_list_rows <- filter(errs, V6 != 0) |> separate(V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_") |> pull(cel_num) |> sort()
cel_list_rows
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set command line flag options ------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
option_list <- list (
make_option (c("--cel_list"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/20220420.cels.txt",
help="Path. [default \"%default\"]"),
make_option (c("--apt_script"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/runSingleSampleMaster_joe_20220421.sh",
help="Path. [default \"%default\"]"),
make_option (c("--cel_parent_dir"), default = "/nfs/cyto/cyto3G/CytoScanHD/CELS/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--cychp_parent_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--scripts_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/",
help="Path. Output directory. default ./")
)
opt  <- parse_args(
OptionParser(#usage= "usage: %prog [options]",
option_list=option_list)
)
opt$cel_list           <- "C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/20220420.cels.txt"
cels <- read.delim(opt$cel_list)
cels
cels[c(cel_list_rows),] |>head()
head(cel_list_rows)
write.table(cels[c(cel_list_rows),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/2_errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
length(cels[c(cel_list_rows),])
head(slurm_errs)
filter(slurm_errs, V5 != 0)
head(slurm_errs)
filter(slurm_errs, V5 != 0) |> separate(V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
setdiff(cel_list_rows_slurm,cel_list_rows)
# find slurm errors that aren't broken link or malformed errors (and will be likely related to special characters in names and paths)
cel_list_rows_slurm <- filter(slurm_errs, V5 != 0) |> separate(V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
setdiff(cel_list_rows_slurm,cel_list_rows)
length(intersect(cel_list_rows_slurm,cel_list_rows))
setdiff(cel_list_rows,cel_list_rows_slurm)
write.table(cels[c(cel_list_rows),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/2_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
cel_list_rows_slurm <- filter(slurm_errs, V5 != 0) |> separate(V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
setdiff(cel_list_rows_slurm,cel_list_rows)
write.table(cels[c(cel_list_rows_slurm),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/slurm_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
611+188
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/errs.txt", header = FALSE, sep = "")
head(errs)
filter(errs, V6 != 0) |> nrow()
write.table(filter(errs, V6 != 0) ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# check that all runs showing 2 errors are due to broken links
cel_list_rows <- filter(errs, V6 != 0) |> separate(V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_") |> pull(cel_num)
cels[c(cel_list_rows),] |>head()
write.table(cels[c(cel_list_rows),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/2_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
length(cels[c(cel_list_rows),])
head(slurm_errs)
filter(slurm_errs, V5 != 0)
# find slurm errors that aren't broken link or malformed errors (and will be likely related to special characters in names and paths)
cel_list_rows_slurm <- filter(slurm_errs, V5 != 0) |> separate(V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
setdiff(cel_list_rows_slurm,cel_list_rows)
write.table(cels[c(cel_list_rows_slurm),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/slurm_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/errs.txt", header = FALSE, sep = "")
head(errs)
filter(errs, V6 != 0) |> nrow()
write.table(filter(errs, V6 != 0) ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# check that all runs showing 2 errors are due to broken links
cel_list_rows <- filter(errs, V6 != 0) |> separate(V1,c("cel_num"), sep = "/") |> separate(cel_num, c("junk","cel_num"), sep = "_") |> pull(cel_num)
cels[c(cel_list_rows),] |>head()
write.table(cels[c(cel_list_rows),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/2_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# cd /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/Slurm
# ls -lth *.err > /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/errs/slurm_errs.txt
slurm_errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/slurm_errs.txt", header = FALSE, sep = "")
head(slurm_errs)
filter(slurm_errs, V5 != 0) |> nrow()
write.table(filter(slurm_errs, V5 != 0),"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/slurm_errs_R.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# find slurm errors that aren't broken link or malformed errors (and will be likely related to special characters in names and paths)
cel_list_rows_slurm <- filter(slurm_errs, V5 != 0) |> separate(V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
cel_list_rows_slurm <- sort(setdiff(cel_list_rows_slurm,cel_list_rows))
cel_list_rows_slurm
write.table(cels[c(cel_list_rows_slurm),] ,"C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/slurm_errs_cels.txt", quote = FALSE, row.names = FALSE, sep = "\t")
# make sure there is a directory for each cel
dirs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/out_dirs.txt", header = FALSE, sep = "")
head(dirs)
# make sure there is a directory for each cel
dirs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/out_dirs.txt", header = FALSE, sep = "")
head(dirs)
dirs <- separate(dirs,V9,c("junk","cel_num"), sep = "_") |> pull(cel_num)
setdiff(c(1:19559),dirs)
setdiff(c(1:19560),dirs)
errs <- read.delim("C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/cychp_output/errs/errs.txt", header = FALSE, sep = "")
head(errs)
filter(errs, V6 != 0) |> nrow()
19559-18945
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
option_list <- list (
make_option (c("--cel_list"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/20220420.cels.txt",
help="Path. [default \"%default\"]"),
make_option (c("--apt_script"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/runSingleSampleMaster_joe_20220421.sh",
help="Path. [default \"%default\"]"),
make_option (c("--cel_parent_dir"), default = "/nfs/cyto/cyto3G/CytoScanHD/CELS/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--cychp_parent_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--scripts_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/",
help="Path. Output directory. default ./")
)
opt  <- parse_args(
OptionParser(#usage= "usage: %prog [options]",
option_list=option_list)
)
install.packages("rCGH")
BiocManager::install("rCGH")
library(rCGH)
test <- readAffyCytoScan("Q:/Emeryville/Cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/20210523_Nimbus5/Ref103_1970324A01_HD_210523.cyhd.cychp")
head(test)
test <- readAffyCytoScan("Q:/Emeryville/Cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/20210523_Nimbus5/Ref103_1970324A01_HD_210523.cyhd.cychp")
warnings()
#
# /home/jmcgir/apps/R/R-4.1.2/bin/Rscript /nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/Generate_CYCHP_Scripts.R
#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load libraries ---------------------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set command line flag options ------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
option_list <- list (
make_option (c("--cel_list"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/20220420.cels.txt",
help="Path. [default \"%default\"]"),
make_option (c("--apt_script"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/runSingleSampleMaster_joe_20220421.sh",
help="Path. [default \"%default\"]"),
make_option (c("--cel_parent_dir"), default = "/nfs/cyto/cyto3G/CytoScanHD/CELS/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--cychp_parent_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--scripts_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/",
help="Path. Output directory. default ./")
)
opt  <- parse_args(
OptionParser(#usage= "usage: %prog [options]",
option_list=option_list)
)
install.packages(c("nycflights13", "gapminder", "Lahman"))
library(tidyverse)
sessioninfo()
sessionInfo()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
head(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(cyl ~ drv)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cty)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
?facet_wrap
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
head(10)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot() +
coord_flip()
library(nycflights13)
View(flights)
flights |>
filter(dest == "IAH") |>
group_by(year, month, day) |>
summarize(
arr_delay = mean(arr_delay, na.rm = TRUE)
)
flights
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot() +
geom_histogram(speed)
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot()
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot() +
geom_histogram(speed)
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot(aes(speed)) +
geom_histogram()
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot(aes(gain)) +
geom_histogram()
flights |>
mutate(gain = dep_delay - arr_delay, speed = distance / air_time * 60) |>
ggplot(aes(speed)) +
geom_histogram()
names(flights)
flights |>
group_by(carrier) |>
summarise(mean_delay = mean(arr_delay)) |>
arrange(mean_delay)
flights |>
group_by(carrier) |>
summarise(mean_delay = mean(arr_delay, na.rm)) |>
arrange(mean_delay)
flights |>
group_by(carrier) |>
summarise(mean_delay = mean(arr_delay, na.rm = TRUE)) |>
arrange(mean_delay)
flights |>
group_by(carrier) |>
summarise(mean_delay = mean(arr_delay, na.rm = TRUE)) |>
arrange(desc(mean_delay))
table1
table1 |>
count(year, wt = cases)
table1 |>
count(year)
billboard_tidy <- billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) |>
mutate(week = parse_number(week))
billboard_tidy |>
ggplot(aes(week, rank, group = track)) +
geom_line(alpha = 1/3) +
scale_y_reverse()
billboard_tidy |>
ggplot(aes(week, rank, group = track)) +
geom_line(alpha = 1/3) #+
who2 |>
pivot_longer(
cols = !(country:year),
names_to = c("diagnosis", "gender", "age"),
names_sep = "_",
values_to = "count"
)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set command line flag options ------------------------------------------------
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
option_list <- list (
make_option (c("--cel_list"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/20220420.cels.txt",
help="Path. [default \"%default\"]"),
make_option (c("--apt_script"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/runSingleSampleMaster_joe_20220421.sh",
help="Path. [default \"%default\"]"),
make_option (c("--cel_parent_dir"), default = "/nfs/cyto/cyto3G/CytoScanHD/CELS/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--cychp_parent_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/cychp_output/",
help="Path. Parent dir shared by all cel files in cel list.  [default \"%default\"]"),
make_option (c("--scripts_output_dir"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/cychp_scripts/",
help="Path. Output directory. default ./")
)
opt  <- parse_args(
OptionParser(#usage= "usage: %prog [options]",
option_list=option_list)
)
opt$cel_list           <- "C:/Users/joseph.mcgirr/OneDrive - Thermo Fisher Scientific/Documents/proj/cytoscan_max/20220420.cels.txt"
cels <- read.delim(opt$cel_list)
cels
cels <- tibble(read.delim(opt$cel_list))
cels
read_tsv(opt$cel_list)
students
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
diamonds |>
filter(carat < 3) |>
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
diamonds |>
filter(carat < 3) |>
ggplot(mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1)
2488068-2488201
77000/3000000
835-1400
565/835
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
option_list <- list (
make_option (c("--cel_list"),
help="Path."),
make_option (c("--ssa_script"), default = "/nfs/cyto2/usr/jmcgir/proj/cytoscan_max/scripts/runSingleSampleMaster_joe_20220421.sh",
help="Path. [default \"%default\"]"),
make_option (c("--cel_parent_dir"),
help="Path. Parent dir shared by all cel files in cel list."),
make_option (c("--cychp_parent_output_dir"),
help="Path. Parent dir shared by all cel files in cel list."),
make_option (c("--temp_dir_name"),
help="Path. Directory for apt temp files that will be deleted."),
make_option (c("--ssa_name_variable"),
help="String. Matches $NAME variable in ssa script."),
make_option (c("--scripts_output_dir"),
help="Path. Output directory.")
)
opt  <- parse_args(
OptionParser(#usage= "usage: %prog [options]",
option_list=option_list)
)
133/136
#https://francojc.github.io/2014/12/19/publishing-rmarkdown-to-wordpress-or-jekyll/
library(knitr)
my.jekyll.site <- "joemcgirr.github.io"
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/")
KnitPost("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/fun_projects.Rmd")
#setwd("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/")
#KnitPost("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/fun_projects.Rmd")
#https://francojc.github.io/2014/12/19/publishing-rmarkdown-to-wordpress-or-jekyll/
library(knitr)
my.jekyll.site <- "joemcgirr.github.io"
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/")
KnitPost("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/fun_projects.Rmd")
#setwd("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/")
#KnitPost("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/fun_projects.Rmd")
#https://francojc.github.io/2014/12/19/publishing-rmarkdown-to-wordpress-or-jekyll/
library(knitr)
my.jekyll.site <- "joemcgirr.github.io"
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/")
KnitPost("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/fun_projects.Rmd")
#setwd("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/")
#KnitPost("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/fun_projects.Rmd")
#https://francojc.github.io/2014/12/19/publishing-rmarkdown-to-wordpress-or-jekyll/
library(knitr)
my.jekyll.site <- "joemcgirr.github.io"
KnitPost <- function(input, base.url = my.jekyll.site) {
opts_knit$set(base.url = base.url)
fig.path <- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
knit(input, envir = parent.frame())
}
setwd("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/")
KnitPost("C:/Users/joseph.mcgirr/Personal/Github/joemcgirr.github.io/_pages/fun_projects.Rmd")
#setwd("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/")
#KnitPost("C:/Users/jmcgirr/Documents/GitHub/my_website/_pages/fun_projects.Rmd")
